{"version":3,"file":"index.js","mappings":"mBAqEA,SAAeA,EAAYC,G,+nCAER,SAAMC,MACrB,qDAAqDD,EAArD,oE,OAGF,OAAwB,OAJlBE,EAAW,UAIJC,OAAuB,CAAP,EAAO,MAET,GAAMD,EAASE,Q,OAC1C,MAAO,CAAP,EAD2B,e,+RCpC7B,SAASC,EAAoBC,EAAeC,GAC1C,IAAMC,EAAYC,SAASC,cAAc,OACnCC,EAAYF,SAASC,cAAc,QACnCE,EAAcH,SAASC,cAAc,QAW3C,OATAC,EAAUE,UAAUC,IAAI,cACxBH,EAAUI,UAAYT,EACtBM,EAAYC,UAAUC,IAAI,QAC1BF,EAAYG,UAAYR,EAExBC,EAAUK,UAAUC,IAAI,QACxBN,EAAUQ,YAAYL,GACtBH,EAAUQ,YAAYJ,GAEfJ,ECzCT,SAASS,EAAkBC,GACzB,IDUMV,EACAW,GAkDR,SACEX,EACAY,GAEAZ,EAAUa,UAAY,GACtBb,EAAUQ,YAAYI,GCjEtBE,CAAkBJ,GADsC,iBDUlDV,EAAYC,SAASC,cAAc,QACnCS,EAAIV,SAASC,cAAc,MAE/BK,UCbsD,iBDcxDP,EAAUK,UAAUC,IAAI,gBACxBN,EAAUQ,YAAYG,GAEfX,ICNT,SAASe,EACPL,EACAM,GAEA,ICzBkBC,EDyBZC,EAAiBF,EAAKG,KAAKC,KAAI,KAC/BC,ECxBc,IAFFJ,ED0BS,GAAGD,EAAKK,QAAQ,GAAGC,aCzBtB,GAAGC,cACUN,EAAIO,MAAM,GDyBzCC,EAAc,GAAGT,EAAKU,IAAIC,SDyDlC,SACE3B,EACAgB,GAEAhB,EAAUa,UAAY,GAEtB,IAAkB,UAAAG,EAAA,eAAM,CAAnB,IAAMY,EAAG,KACZ5B,EAAUQ,YAAYoB,IC1DxBC,CAAyBnB,EAFP,CAHWb,EAAoB,cAAeqB,GACvCrB,EAAoB,QAASwB,GAC7BxB,EAAoB,OAAQ4B,K,i1CEjCvDK,OAAOC,iBAAiB,QCExB,W,uFACQC,EAAO/B,SAASgC,eAAe,iBAEhCF,iBAAiB,UAAU,SAAOG,GAAQ,qC,8DAU5B,OATjBA,EAAEC,iBAEIzB,EAAkBT,SAASmC,cAC/B,kBAEIC,EJRV,SAA2BC,GACzB,IAAMD,EAAcpC,SAASC,cAAc,OACrCqC,EAAYtC,SAASC,cAAc,OACnCS,EAAIV,SAASC,cAAc,KAQjC,OANAS,EAAEJ,UIGsC,gBJFxC8B,EAAYhC,UAAUC,IAAI,WAC1BiC,EAAUlC,UAAUC,IAAI,UACxB+B,EAAY7B,YAAYG,GACxB0B,EAAY7B,YAAY+B,GAEjBF,EIHeG,GACdhD,EAAQwC,EAAKI,cAAc,eJiDrC,SACEpC,EACAqC,GAEArC,EAAUa,UAAY,GACtBb,EAAUQ,YAAY6B,GIpDpBI,CAAkB/B,EAAiB2B,GAClB,GAAM9C,EAAYC,EAAMkD,Q,OAEzC,OAFMhD,EAAW,UAGV,CAAP,EAAOqB,EAAyBL,EAAiBhB,IAD3B,CAAP,EAAOe,EAAkBC,c","sources":["webpack://stormae/./src/scripts/modules/request.ts","webpack://stormae/./src/scripts/modules/renderResult.ts","webpack://stormae/./src/scripts/modules/responseHandler.ts","webpack://stormae/./src/scripts/modules/utils/capitalize.ts","webpack://stormae/./src/scripts/index.ts","webpack://stormae/./src/scripts/modules/form.ts"],"sourcesContent":["type Base = string;\ntype Visibility = number;\ntype Dt = number;\ntype Timezone = number;\ntype Id = number;\ntype Name = string;\ntype Cod = number;\ntype Weather = [\n  {\n    id: string;\n    main: string;\n    description: string;\n    icon: string;\n  }\n];\n\ninterface Temperature {\n  temp: number;\n  feels_like: number;\n  temp_min: number;\n  temp_max: number;\n  pressure: number;\n  humidity: number;\n}\n\ninterface Coordinates {\n  long: number;\n  lat: number;\n}\n\ninterface Wind {\n  speed: number;\n  deg: 350;\n}\n\ninterface Clouds {\n  all: number;\n}\n\ninterface Sys {\n  type: number;\n  id: number;\n  message: number;\n  country: string;\n  sunrise: number;\n  sunset: number;\n}\n\ninterface RelevantData {\n  coord: Coordinates;\n  weather: Weather;\n  base: Base;\n  main: Temperature;\n  visibility: Visibility;\n  wind: Wind;\n  clouds: Clouds;\n  dt: Dt;\n  sys: Sys;\n  timezone: Timezone;\n  id: Id;\n  name: Name;\n  cod: Cod;\n}\n\n/**\n * Makes the request to the weather api.\n * @param {string} query - The location name to search.\n * @returns Null, if the request fails, and a RelevantData object if successful.\n */\nasync function makeRequest(query: string): Promise<null | RelevantData> {\n  const API_KEY = process.env.API_KEY;\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/weather?q=${query}&appid=${API_KEY}&lang=pt_br&units=metric`\n  );\n\n  if (response.status === 404) return null;\n\n  const json: RelevantData = await response.json();\n  return json;\n}\n\nexport { makeRequest, RelevantData };\n","/**\n * Creates a loading placeholder component.\n * @param {string} msg - The message to be shown on the placeholder.\n * @returns The created component.\n */\nfunction createPlaceholder(msg: string): HTMLDivElement {\n  const placeholder = document.createElement('div');\n  const loaderDiv = document.createElement('div');\n  const p = document.createElement('p');\n\n  p.innerText = msg;\n  placeholder.classList.add('loading');\n  loaderDiv.classList.add('loader');\n  placeholder.appendChild(p);\n  placeholder.appendChild(loaderDiv);\n\n  return placeholder;\n}\n\n/**\n * Creates a bad response message container.\n * @param {string} msg - The message to be shown as a bad response massage.\n * @returns The bad response message container.\n */\nfunction createBadResponseContainer(msg: string): HTMLDivElement {\n  const container = document.createElement('div');\n  const p = document.createElement('p');\n\n  p.innerText = msg;\n  container.classList.add('bad-response');\n  container.appendChild(p);\n\n  return container;\n}\n\n/**\n * Creates a card container with weather data.\n * @param {string} title - The title of the data.\n * @param {string} content - The relevant information to show.\n * @returns The card element.\n */\nfunction createDataContainer(title: string, content: string): HTMLDivElement {\n  const container = document.createElement('div');\n  const titleSpan = document.createElement('span');\n  const contentSpan = document.createElement('span');\n\n  titleSpan.classList.add('data-title');\n  titleSpan.innerText = title;\n  contentSpan.classList.add('data');\n  contentSpan.innerText = content;\n\n  container.classList.add('card');\n  container.appendChild(titleSpan);\n  container.appendChild(contentSpan);\n\n  return container;\n}\n\n/**\n * Appends a loading placeholder to a container element.\n * @param {HTMLDivElement} container - The container element where the placeholder will be appended.\n * @param {HTMLDivElement} placeholder - The placeholder element to append.\n */\nfunction renderPlaceholder(\n  container: HTMLElement,\n  placeholder: HTMLDivElement\n): void {\n  container.innerHTML = '';\n  container.appendChild(placeholder);\n}\n\n/**\n * Appends a bad response message component to a container.\n * @param {HTMLElement} container - The container where the bad response message component will be appended.\n * @param {HTMLDivElement} badResponseComponent - The bad response message component.\n */\nfunction renderBadResponse(\n  container: HTMLElement,\n  badResponseComponent: HTMLDivElement\n): void {\n  container.innerHTML = '';\n  container.appendChild(badResponseComponent);\n}\n\n/**\n * Appends the successful response data to a container.\n * @param {HTMLElement} container - The container where the data will be appended.\n * @param {HTMLDivElement[]} data - An array containing card elements with relevant data appended.\n */\nfunction renderSuccessfulResponse(\n  container: HTMLElement,\n  data: HTMLDivElement[]\n): void {\n  container.innerHTML = '';\n\n  for (const div of data) {\n    container.appendChild(div);\n  }\n}\n\nexport {\n  createPlaceholder,\n  createBadResponseContainer,\n  createDataContainer,\n  renderPlaceholder,\n  renderBadResponse,\n  renderSuccessfulResponse\n};\n","import {\n  createBadResponseContainer,\n  createDataContainer,\n  renderBadResponse,\n  renderSuccessfulResponse\n} from './renderResult';\nimport { RelevantData } from './request';\nimport { capitalize } from './utils/capitalize';\n\n/**\n *  Handles the 404 error code response.\n * @param {HTMLElement} resultContainer - The container where the reponse message will be appended.\n\n */\nfunction handleBadResponse(resultContainer: HTMLElement): void {\n  const badResponseContainer = createBadResponseContainer('Sem resultados');\n  renderBadResponse(resultContainer, badResponseContainer);\n  return;\n}\n\n/**\n * Handles a successfull request to the weather api.\n * @param {HTMLElement} resultContainer - The container where the response data will be appended.\n *\n * @param {RelevantData} data - The data to show to the user.\n */\nfunction handleSuccessfulResponse(\n  resultContainer: HTMLElement,\n  data: RelevantData\n): void {\n  const temperature = `${data.main.temp} C`;\n  const weather = capitalize(`${data.weather[0].description}`);\n  const countryCode = `${data.sys.country}`;\n  const temperatureContainer = createDataContainer('Temperatura', temperature);\n  const weatherContainer = createDataContainer('Clima', weather);\n  const countryContainer = createDataContainer('Pa√≠s', countryCode);\n  const dataArray = [temperatureContainer, weatherContainer, countryContainer];\n\n  renderSuccessfulResponse(resultContainer, dataArray);\n}\n\nexport { handleBadResponse, handleSuccessfulResponse };\n","/**\n * Capitalizes the first letter of a given string.\n * @param {string} str - The string whose first letter will be capitalized.\n * @returns The new string.\n */\nfunction capitalize(str: string): string {\n  const firstLetter = str[0].toUpperCase();\n  const capitalized = `${firstLetter}${str.slice(1)}`;\n  return capitalized;\n}\n\nexport { capitalize };\n","import { handleSubmit } from './modules/form';\n\nwindow.addEventListener('load', handleSubmit);\n","import { makeRequest, RelevantData } from './request';\nimport { renderPlaceholder, createPlaceholder } from './renderResult';\nimport { handleBadResponse, handleSuccessfulResponse } from './responseHandler';\n\nasync function handleSubmit(): Promise<void> {\n  const form = document.getElementById('weather-form') as HTMLFormElement;\n\n  form.addEventListener('submit', async (e: Event) => {\n    e.preventDefault();\n\n    const resultContainer = document.querySelector(\n      'section#result'\n    ) as HTMLElement;\n    const placeholder = createPlaceholder('Procurando...');\n    const query = form.querySelector('input#query') as HTMLInputElement;\n\n    renderPlaceholder(resultContainer, placeholder);\n    const response = await makeRequest(query.value);\n\n    if (!response) return handleBadResponse(resultContainer);\n    return handleSuccessfulResponse(resultContainer, response as RelevantData);\n  });\n}\n\nexport { handleSubmit };\n"],"names":["makeRequest","query","fetch","response","status","json","createDataContainer","title","content","container","document","createElement","titleSpan","contentSpan","classList","add","innerText","appendChild","handleBadResponse","resultContainer","p","badResponseComponent","innerHTML","renderBadResponse","handleSuccessfulResponse","data","str","temperature","main","temp","weather","description","toUpperCase","slice","countryCode","sys","country","div","renderSuccessfulResponse","window","addEventListener","form","getElementById","e","preventDefault","querySelector","placeholder","msg","loaderDiv","createPlaceholder","renderPlaceholder","value"],"sourceRoot":""}